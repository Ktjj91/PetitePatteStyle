datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  name             String?
  email            String    @unique
  password         String?
  emailVerified    DateTime?
  role             String    @default("USER")
  accounts         Account[]
  sessions         Session[]
  orders           Orders[]
  stripeCustomerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Categories {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  products    Products[]
}

model Products {
  id           Int              @id @default(autoincrement())
  name         String
  description  String
  price        Decimal
  image        String
  quantity     Int
  size         String
  is_available Boolean          @default(true)
  Categories   Categories?      @relation(fields: [categoriesId], references: [id])
  categoriesId Int?
  order        ProductOnOrder[]
}

model Orders {
  id           Int              @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String
  total_amount String
  payment_id   String           @default(uuid())
  is_available Boolean          @default(true)
  product      ProductOnOrder[]
  User         User?            @relation(fields: [userId], references: [id])
  userId       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOnOrder {
  product   Products @relation(fields: [productId], references: [id])
  productId Int
  order     Orders   @relation(fields: [orderId], references: [id])
  orderId   Int

  @@id([productId, orderId])
}
